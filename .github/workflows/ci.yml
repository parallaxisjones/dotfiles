name: CI

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  lint-eval:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Statix Lint
        run: |
          nix run --extra-experimental-features 'nix-command flakes' nixpkgs#statix -- check .

      - name: Deadnix static analysis (verbose, capture report)
        run: |
          set -euo pipefail
          echo "Running deadnix (will fail if issues are found)..."
          # Run without --quiet so warnings are visible; capture exit status
          nix run --extra-experimental-features 'nix-command flakes' nixpkgs#deadnix -- --fail . | tee deadnix-report.txt
          echo "DEADNIX_STATUS=${PIPESTATUS[0]}" >> $GITHUB_ENV
          # If failures, add a readable summary
          if [ "${PIPESTATUS[0]}" -ne 0 ]; then
            {
              echo "## Deadnix found issues"
              echo
              echo "Deadnix reported the following (first 400 lines):"
              echo
              echo '```'
              sed -n '1,400p' deadnix-report.txt
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload Deadnix report (on failure)
        if: env.DEADNIX_STATUS != '0'
        uses: actions/upload-artifact@v4
        with:
          name: deadnix-report
          path: deadnix-report.txt

      - name: Fail if Deadnix found issues
        if: env.DEADNIX_STATUS != '0'
        run: |
          echo "Deadnix found issues. See summary and attached report." >&2
          exit 1

      - name: Flake checks
        run: |
          nix --extra-experimental-features 'nix-command flakes' flake check --all-systems

      - name: Evaluate Darwin and NixOS systems
        run: |
          set -euo pipefail
          nix --extra-experimental-features 'nix-command flakes' eval .#darwinConfigurations.aarch64-darwin.system
          nix --extra-experimental-features 'nix-command flakes' eval .#darwinConfigurations.x86_64-darwin.system
          nix --extra-experimental-features 'nix-command flakes' eval .#nixosConfigurations.x86_64-linux.config.system.build.toplevel
          nix --extra-experimental-features 'nix-command flakes' eval .#nixosConfigurations.aarch64-linux.config.system.build.toplevel

  automerge:
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'automerge')
    runs-on: ubuntu-latest
    needs: [lint-eval]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Enable GitHub native auto-merge
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash


